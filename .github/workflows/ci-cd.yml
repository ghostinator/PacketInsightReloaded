name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_DEFAULT_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install package in development mode
        run: pip install -e .

      - name: Run Black (Code Formatting)
        run: |
          black --check --diff insight/ tests/
          echo "Black formatting check completed" > black-results.txt

      - name: Run isort (Import Sorting)
        run: |
          isort --check-only --diff insight/ tests/
          echo "isort import sorting check completed" > isort-results.txt

      - name: Run flake8 (Style Guide)
        run: |
          flake8 insight/ tests/ --output-file=flake8-report.txt --format=default
          echo "Flake8 style guide check completed"

      - name: Run pylint (Code Analysis)
        run: |
          pylint insight/ --output-format=text --reports=no --score=no > pylint-report.txt || true
          echo "Pylint code analysis completed"

      - name: Run mypy (Type Checking)
        run: |
          mypy insight/ --txt-report ./mypy-report --html-report ./mypy-html-report
          echo "MyPy type checking completed"

      - name: Upload Code Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports-${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            black-results.txt
            isort-results.txt
            flake8-report.txt
            pylint-report.txt
            mypy-report/
            mypy-html-report/
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install bandit safety

      - name: Install package in development mode
        run: pip install -e .

      - name: Run Bandit (Security Linting)
        run: |
          bandit -r insight/ -f json -o bandit-report.json || true
          bandit -r insight/ -f txt -o bandit-report.txt || true
          echo "Bandit security analysis completed"

      - name: Run Safety (Dependency Vulnerability Check)
        run: |
          safety check --json --output safety-report.json || true
          safety check --output safety-report.txt || true
          echo "Safety dependency check completed"

      - name: Generate Security Summary
        run: |
          echo "# Security Analysis Summary" > security-summary.md
          echo "## Bandit Results" >> security-summary.md
          if [ -f bandit-report.txt ]; then
            echo '```
            cat bandit-report.txt >> security-summary.md
            echo '```' >> security-summary.md
          fi
          echo "## Safety Results" >> security-summary.md
          if [ -f safety-report.txt ]; then
            echo '```
            cat safety-report.txt >> security-summary.md
            echo '```' >> security-summary.md
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            bandit-report.json
            bandit-report.txt
            safety-report.json
            safety-report.txt
            security-summary.md
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y tshark wireshark-common
          sudo usermod -a -G wireshark $USER

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install wireshark

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Note: Wireshark for Windows needs manual installation
          # For CI, we'll use a portable version or skip network tests
          echo "Windows dependencies installation placeholder"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest pytest-cov pytest-xdist pytest-mock

      - name: Install package in development mode
        run: pip install -e .

      - name: Create test directories
        run: |
          mkdir -p test-results coverage-reports

      - name: Run unit tests with coverage
        run: |
          pytest tests/ \
            --cov=insight \
            --cov-report=xml:coverage-reports/coverage.xml \
            --cov-report=html:coverage-reports/htmlcov \
            --cov-report=term \
            --junit-xml=test-results/junit.xml \
            --verbose \
            --tb=short \
            -n auto

      - name: Generate test summary
        if: always()
        run: |
          echo "# Test Results Summary" > test-results/summary.md
          echo "## Environment" >> test-results/summary.md
          echo "- OS: ${{ matrix.os }}" >> test-results/summary.md
          echo "- Python: ${{ matrix.python-version }}" >> test-results/summary.md
          echo "- Timestamp: $(date)" >> test-results/summary.md
          echo "" >> test-results/summary.md
          if [ -f test-results/junit.xml ]; then
            echo "## Test Results" >> test-results/summary.md
            echo "JUnit XML results generated successfully" >> test-results/summary.md
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            test-results/
            coverage-reports/
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [code-quality, security-analysis]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f docs/requirements.txt ]; then
            pip install -r docs/requirements.txt
          fi

      - name: Install package in development mode
        run: pip install -e .

      - name: Create docs directory if not exists
        run: |
          mkdir -p docs/_static docs/_templates
          if [ ! -f docs/conf.py ]; then
            echo "Warning: docs/conf.py not found, creating basic configuration"
            sphinx-quickstart -q -p "Packet Insight" -a "Development Team" -v "1.0" --ext-autodoc --ext-viewcode --makefile --no-batchfile docs/
          fi

      - name: Build Sphinx documentation
        run: |
          cd docs
          make clean
          make html SPHINXOPTS="-W --keep-going"
          echo "Documentation build completed"

      - name: Generate documentation summary
        run: |
          echo "# Documentation Build Summary" > docs/build-summary.md
          echo "## Build Information" >> docs/build-summary.md
          echo "- Build Date: $(date)" >> docs/build-summary.md
          echo "- Python Version: ${{ env.PYTHON_DEFAULT_VERSION }}" >> docs/build-summary.md
          echo "- Sphinx Version: $(sphinx-build --version)" >> docs/build-summary.md
          echo "" >> docs/build-summary.md
          if [ -d docs/_build/html ]; then
            echo "## Generated Files" >> docs/build-summary.md
            find docs/_build/html -name "*.html" | head -20 >> docs/build-summary.md
          fi

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-${{ github.run_id }}
          path: |
            docs/_build/html/
            docs/build-summary.md
          retention-days: 30
          compression-level: 6
          if-no-files-found: error

  build-distributions:
    name: Build Distributions
    runs-on: ${{ matrix.os }}
    needs: [test, build-docs]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools pyinstaller
          pip install -r requirements.txt

      - name: Install package in development mode
        run: pip install -e .

      - name: Build source distribution (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m build --sdist
          echo "Source distribution built successfully"

      - name: Build wheel distribution
        run: |
          python -m build --wheel
          echo "Wheel distribution built successfully"

      - name: Build PyInstaller executable
        run: |
          pyinstaller --clean --noconfirm \
            --name packet-insight-${{ matrix.os }} \
            --onefile \
            --console \
            --add-data "insight:insight" \
            --hidden-import pkg_resources.py2_warn \
            --collect-all insight \
            insight/cli.py
          echo "PyInstaller executable built successfully"

      - name: Create distribution summary
        run: |
          echo "# Distribution Build Summary" > dist-summary-${{ matrix.os }}.md
          echo "## Build Information" >> dist-summary-${{ matrix.os }}.md
          echo "- OS: ${{ matrix.os }}" >> dist-summary-${{ matrix.os }}.md
          echo "- Python: ${{ env.PYTHON_DEFAULT_VERSION }}" >> dist-summary-${{ matrix.os }}.md
          echo "- Build Date: $(date)" >> dist-summary-${{ matrix.os }}.md
          echo "" >> dist-summary-${{ matrix.os }}.md
          echo "## Generated Files" >> dist-summary-${{ matrix.os }}.md
          if [ -d dist ]; then
            ls -la dist/ >> dist-summary-${{ matrix.os }}.md
          fi
          if [ -d dist ]; then
            ls -la dist/ >> dist-summary-${{ matrix.os }}.md
          fi

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: distributions-${{ matrix.os }}-${{ github.run_id }}
          path: |
            dist/
            dist-summary-${{ matrix.os }}.md
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-distributions]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tshark wireshark-common
          sudo usermod -a -G wireshark $USER

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          pattern: distributions-*-${{ github.run_id }}
          path: ./downloaded-distributions/
          merge-multiple: true

      - name: Install package from wheel
        run: |
          find ./downloaded-distributions -name "*.whl" -exec pip install {} \;
          echo "Package installed from wheel successfully"

      - name: Run integration tests
        run: |
          # Test CLI availability
          packet-insight --version
          packet-insight --help
          
          # Test basic functionality (if sample data exists)
          if [ -f tests/data/sample.pcap ]; then
            packet-insight analyze tests/data/sample.pcap
          else
            echo "No sample PCAP file found, skipping analysis test"
          fi
          
          # Test configuration
          packet-insight config show
          
          echo "Integration tests completed successfully"

      - name: Generate integration test report
        run: |
          echo "# Integration Test Report" > integration-test-report.md
          echo "## Test Environment" >> integration-test-report.md
          echo "- OS: Ubuntu Latest" >> integration-test-report.md
          echo "- Python: ${{ env.PYTHON_DEFAULT_VERSION }}" >> integration-test-report.md
          echo "- Test Date: $(date)" >> integration-test-report.md
          echo "" >> integration-test-report.md
          echo "## Package Information" >> integration-test-report.md
          packet-insight --version >> integration-test-report.md
          echo "" >> integration-test-report.md
          echo "## Tests Executed" >> integration-test-report.md
          echo "- CLI availability: ✓" >> integration-test-report.md
          echo "- Help command: ✓" >> integration-test-report.md
          echo "- Configuration access: ✓" >> integration-test-report.md

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ github.run_id }}
          path: integration-test-report.md
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-distributions, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ github.run_id }}'
          path: ./release-artifacts/
          merge-multiple: true

      - name: Create release notes
        run: |
          echo "# Release Notes" > release-notes.md
          echo "" >> release-notes.md
          echo "## Version ${GITHUB_REF#refs/tags/}" >> release-notes.md
          echo "" >> release-notes.md
          echo "### What's New" >> release-notes.md
          echo "- Enhanced packet analysis capabilities" >> release-notes.md
          echo "- Improved cross-platform compatibility" >> release-notes.md
          echo "- Better error handling and user experience" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Downloads" >> release-notes.md
          echo "- Standalone executables attached to this release" >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/dist/packet-insight-*
            release-artifacts/documentation-*/
          body_path: release-notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Report deployment success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "Version: ${GITHUB_REF#refs/tags/}"
          echo "GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}"

      - name: Update deployment status
        uses: actions/upload-artifact@v4
        with:
          name: deployment-status-${{ github.run_id }}
          path: |
            echo "Deployment completed at $(date)" > deployment-status.txt
          retention-days: 365
          compression-level: 1

  cleanup:
    name: Cleanup & Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, security-analysis, test, build-docs, build-distributions, integration-tests]
    if: always()
    
    steps:
      - name: Download all artifacts for cleanup
        uses: actions/download-artifact@v4
        if: always()
        with:
          pattern: '*-${{ github.run_id }}'
          path: ./all-artifacts/
          merge-multiple: true

      - name: Generate final report
        if: always()
        run: |
          echo "# CI/CD Pipeline Final Report" > final-report.md
          echo "" >> final-report.md
          echo "## Workflow Summary" >> final-report.md
          echo "- Workflow Run ID: ${{ github.run_id }}" >> final-report.md
          echo "- Trigger: ${{ github.event_name }}" >> final-report.md
          echo "- Branch/Tag: ${GITHUB_REF#refs/*/}" >> final-report.md
          echo "- Commit: ${{ github.sha }}" >> final-report.md
          echo "- Completion Time: $(date)" >> final-report.md
          echo "" >> final-report.md
          echo "## Job Status" >> final-report.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> final-report.md
          echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> final-report.md
          echo "- Tests: ${{ needs.test.result }}" >> final-report.md
          echo "- Documentation: ${{ needs.build-docs.result }}" >> final-report.md
          echo "- Distributions: ${{ needs.build-distributions.result }}" >> final-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> final-report.md
          echo "" >> final-report.md
          echo "## Artifacts Generated" >> final-report.md
          if [ -d ./all-artifacts ]; then
            find ./all-artifacts -type f | sort >> final-report.md
          fi

      - name: Upload final report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-report-${{ github.run_id }}
          path: final-report.md
          retention-days: 90
          compression-level: 6

      - name: Cleanup old artifacts (if needed)
        if: always()
        run: |
          echo "Cleanup completed - artifacts will expire based on retention-days settings"
          echo "Old artifacts are automatically cleaned up by GitHub Actions"
