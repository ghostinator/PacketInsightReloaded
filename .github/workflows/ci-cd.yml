name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_DEFAULT_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install package in development mode
        run: pip install -e .

      - name: Create output directories
        run: |
          mkdir -p reports
          echo "Output directories created successfully"

      - name: Run Black (Code Formatting) - Check Only
        run: |
          black --check --diff insight/ tests/ > reports/black-results.txt 2>&1 || echo "Black formatting issues found"
          echo "Black formatting check completed"

      - name: Run isort (Import Sorting) - Check Only
        run: |
          isort --check-only --diff insight/ tests/ > reports/isort-results.txt 2>&1 || echo "Import sorting issues found"
          echo "isort import sorting check completed"

      - name: Run flake8 (Style Guide)
        run: |
          flake8 insight/ tests/ --output-file=reports/flake8-report.txt --format=default || echo "Flake8 issues found"
          echo "Flake8 style guide check completed"

      - name: Run pylint (Code Analysis)
        run: |
          pylint insight/ --output-format=text --reports=no --score=no > reports/pylint-report.txt || echo "Pylint issues found"
          echo "Pylint code analysis completed"

      - name: Run mypy (Type Checking)
        run: |
          mkdir -p reports/mypy-report reports/mypy-html-report
          mypy insight/ --txt-report ./reports/mypy-report --html-report ./reports/mypy-html-report || echo "MyPy type checking issues found"
          echo "MyPy type checking completed"

      - name: Upload Code Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports-${{ matrix.python-version }}-${{ github.run_id }}
          path: reports/
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install bandit safety

      - name: Install package in development mode
        run: pip install -e .

      - name: Create security reports directory
        run: mkdir -p security-reports

      - name: Run Bandit (Security Linting)
        run: |
          bandit -r insight/ -f json -o security-reports/bandit-report.json || echo "Bandit security issues found"
          bandit -r insight/ -f txt -o security-reports/bandit-report.txt || echo "Bandit security issues found"
          echo "Bandit security analysis completed"

      - name: Run Safety (Dependency Vulnerability Check)
        run: |
          safety check --json --output security-reports/safety-report.json || echo "Safety vulnerability issues found"
          safety check --output security-reports/safety-report.txt || echo "Safety vulnerability issues found"
          echo "Safety dependency check completed"

      - name: Generate Security Summary
        run: |
          echo "# Security Analysis Summary" > security-reports/security-summary.md
          echo "## Bandit Results" >> security-reports/security-summary.md
          if [ -f security-reports/bandit-report.txt ]; then
            echo '```
            cat security-reports/bandit-report.txt >> security-reports/security-summary.md
            echo '```' >> security-reports/security-summary.md
          fi
          echo "## Safety Results" >> security-reports/security-summary.md
          if [ -f security-reports/safety-report.txt ]; then
            echo '```
            cat security-reports/safety-report.txt >> security-reports/security-summary.md
            echo '```' >> security-reports/security-summary.md
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: security-reports/
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y tshark wireshark-common
          sudo groupadd -f wireshark
          sudo usermod -a -G wireshark $USER || echo "Failed to add user to wireshark group"

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install wireshark || echo "Wireshark installation failed, continuing without it"

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Skipping Wireshark installation on Windows CI"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest pytest-cov pytest-xdist pytest-mock

      - name: Install package in development mode
        run: pip install -e .

      - name: Create test directories (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p test-results
          mkdir -p coverage-reports
          echo "Test directories created successfully"

      - name: Create test directories (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Force -Path "test-results"
          New-Item -ItemType Directory -Force -Path "coverage-reports"
          Write-Host "Test directories created successfully"

      - name: Run unit tests with coverage (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          pytest tests/ \
            --cov=insight \
            --cov-report=xml:coverage-reports/coverage.xml \
            --cov-report=html:coverage-reports/htmlcov \
            --cov-report=term \
            --junit-xml=test-results/junit.xml \
            --verbose \
            --tb=short \
            -n auto || echo "Some tests failed, but continuing..."

      - name: Run unit tests with coverage (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pytest tests/ --cov=insight --cov-report=xml:coverage-reports/coverage.xml --cov-report=html:coverage-reports/htmlcov --cov-report=term --junit-xml=test-results/junit.xml --verbose --tb=short -n auto
          if ($LASTEXITCODE -ne 0) { Write-Host "Some tests failed, but continuing..." }

      - name: Generate test summary (Linux/macOS)
        if: always() && matrix.os != 'windows-latest'
        run: |
          echo "# Test Results Summary" > test-results/summary.md
          echo "## Environment" >> test-results/summary.md
          echo "- OS: ${{ matrix.os }}" >> test-results/summary.md
          echo "- Python: ${{ matrix.python-version }}" >> test-results/summary.md
          echo "- Timestamp: $(date)" >> test-results/summary.md
          echo "" >> test-results/summary.md
          if [ -f test-results/junit.xml ]; then
            echo "## Test Results" >> test-results/summary.md
            echo "JUnit XML results generated successfully" >> test-results/summary.md
          fi

      - name: Generate test summary (Windows)
        if: always() && matrix.os == 'windows-latest'
        run: |
          $summaryPath = "test-results\summary.md"
          "# Test Results Summary" | Out-File -FilePath $summaryPath -Encoding utf8
          "## Environment" | Out-File -FilePath $summaryPath -Append -Encoding utf8
          "- OS: ${{ matrix.os }}" | Out-File -FilePath $summaryPath -Append -Encoding utf8
          "- Python: ${{ matrix.python-version }}" | Out-File -FilePath $summaryPath -Append -Encoding utf8
          "- Timestamp: $(Get-Date)" | Out-File -FilePath $summaryPath -Append -Encoding utf8
          "" | Out-File -FilePath $summaryPath -Append -Encoding utf8
          if (Test-Path "test-results\junit.xml") {
              "## Test Results" | Out-File -FilePath $summaryPath -Append -Encoding utf8
              "JUnit XML results generated successfully" | Out-File -FilePath $summaryPath -Append -Encoding utf8
          }

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            test-results/
            coverage-reports/
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [code-quality, security-analysis]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme
          if [ -f docs/requirements.txt ]; then
            pip install -r docs/requirements.txt
          fi

      - name: Install package in development mode
        run: pip install -e .

      - name: Create docs directory if not exists
        run: |
          mkdir -p docs/_static docs/_templates
          if [ ! -f docs/conf.py ]; then
            echo "Warning: docs/conf.py not found, creating basic configuration"
            cd docs
            sphinx-quickstart -q -p "Packet Insight" -a "Development Team" -v "1.0" --ext-autodoc --ext-viewcode --makefile --no-batchfile .
            cd ..
          fi

      - name: Build Sphinx documentation
        run: |
          cd docs
          make clean || echo "Clean failed, continuing..."
          make html SPHINXOPTS="-W --keep-going" || echo "Documentation build had warnings/errors"
          echo "Documentation build completed"

      - name: Generate documentation summary
        run: |
          echo "# Documentation Build Summary" > docs/build-summary.md
          echo "## Build Information" >> docs/build-summary.md
          echo "- Build Date: $(date)" >> docs/build-summary.md
          echo "- Python Version: ${{ env.PYTHON_DEFAULT_VERSION }}" >> docs/build-summary.md
          sphinx-build --version >> docs/build-summary.md 2>&1 || echo "Sphinx version check failed"
          echo "" >> docs/build-summary.md
          if [ -d docs/_build/html ]; then
            echo "## Generated Files" >> docs/build-summary.md
            find docs/_build/html -name "*.html" | head -20 >> docs/build-summary.md
          fi

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-${{ github.run_id }}
          path: |
            docs/_build/html/
            docs/build-summary.md
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  build-distributions:
    name: Build Distributions
    runs-on: ${{ matrix.os }}
    needs: [test, build-docs]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools pyinstaller
          pip install -r requirements.txt

      - name: Install package in development mode
        run: pip install -e .

      - name: Build source distribution (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m build --sdist || echo "Source distribution build failed"
          echo "Source distribution build completed"

      - name: Build wheel distribution
        run: |
          python -m build --wheel || echo "Wheel distribution build failed"
          echo "Wheel distribution build completed"

      - name: Build PyInstaller executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ -f insight/cli.py ]; then
            pyinstaller --clean --noconfirm \
              --name packet-insight-${{ matrix.os }} \
              --onefile \
              --console \
              --hidden-import pkg_resources.py2_warn \
              --collect-all insight \
              insight/cli.py || echo "PyInstaller build failed"
          else
            echo "CLI entry point not found, skipping PyInstaller build"
          fi
          echo "PyInstaller executable build completed"

      - name: Build PyInstaller executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path "insight\cli.py") {
            pyinstaller --clean --noconfirm --name packet-insight-${{ matrix.os }} --onefile --console --hidden-import pkg_resources.py2_warn --collect-all insight insight\cli.py
            if ($LASTEXITCODE -ne 0) { Write-Host "PyInstaller build failed" }
          } else {
            Write-Host "CLI entry point not found, skipping PyInstaller build"
          }
          Write-Host "PyInstaller executable build completed"

      - name: Create distribution summary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist-reports
          echo "# Distribution Build Summary" > dist-reports/dist-summary-${{ matrix.os }}.md
          echo "## Build Information" >> dist-reports/dist-summary-${{ matrix.os }}.md
          echo "- OS: ${{ matrix.os }}" >> dist-reports/dist-summary-${{ matrix.os }}.md
          echo "- Python: ${{ env.PYTHON_DEFAULT_VERSION }}" >> dist-reports/dist-summary-${{ matrix.os }}.md
          echo "- Build Date: $(date)" >> dist-reports/dist-summary-${{ matrix.os }}.md
          echo "" >> dist-reports/dist-summary-${{ matrix.os }}.md
          echo "## Generated Files" >> dist-reports/dist-summary-${{ matrix.os }}.md
          if [ -d dist ]; then
            ls -la dist/ >> dist-reports/dist-summary-${{ matrix.os }}.md
          fi

      - name: Create distribution summary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Force -Path "dist-reports"
          $summaryFile = "dist-reports\dist-summary-${{ matrix.os }}.md"
          "# Distribution Build Summary" | Out-File -FilePath $summaryFile -Encoding utf8
          "## Build Information" | Out-File -FilePath $summaryFile -Append -Encoding utf8
          "- OS: ${{ matrix.os }}" | Out-File -FilePath $summaryFile -Append -Encoding utf8
          "- Python: ${{ env.PYTHON_DEFAULT_VERSION }}" | Out-File -FilePath $summaryFile -Append -Encoding utf8
          "- Build Date: $(Get-Date)" | Out-File -FilePath $summaryFile -Append -Encoding utf8
          "" | Out-File -FilePath $summaryFile -Append -Encoding utf8
          "## Generated Files" | Out-File -FilePath $summaryFile -Append -Encoding utf8
          if (Test-Path "dist") {
            Get-ChildItem -Path "dist" | Out-String | Out-File -FilePath $summaryFile -Append -Encoding utf8
          }

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: distributions-${{ matrix.os }}-${{ github.run_id }}
          path: |
            dist/
            dist-reports/
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-distributions]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tshark wireshark-common
          sudo groupadd -f wireshark
          sudo usermod -a -G wireshark $USER || echo "Failed to add user to wireshark group"

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          pattern: distributions-*-${{ github.run_id }}
          path: ./downloaded-distributions/
          merge-multiple: true

      - name: Install package from wheel
        run: |
          find ./downloaded-distributions -name "*.whl" -exec pip install {} \; || echo "Package installation from wheel failed"
          echo "Package installation from wheel completed"

      - name: Run integration tests
        run: |
          mkdir -p integration-reports
          
          # Test CLI availability
          if command -v packet-insight &> /dev/null; then
            packet-insight --version || echo "Version command failed"
            packet-insight --help || echo "Help command failed"
          else
            echo "packet-insight CLI not found in PATH"
          fi
          
          # Test basic functionality (if sample data exists)
          if [ -f tests/data/sample.pcap ]; then
            packet-insight analyze tests/data/sample.pcap || echo "Analysis test failed"
          else
            echo "No sample PCAP file found, skipping analysis test"
          fi
          
          echo "Integration tests completed"

      - name: Generate integration test report
        run: |
          echo "# Integration Test Report" > integration-reports/integration-test-report.md
          echo "## Test Environment" >> integration-reports/integration-test-report.md
          echo "- OS: Ubuntu Latest" >> integration-reports/integration-test-report.md
          echo "- Python: ${{ env.PYTHON_DEFAULT_VERSION }}" >> integration-reports/integration-test-report.md
          echo "- Test Date: $(date)" >> integration-reports/integration-test-report.md
          echo "" >> integration-reports/integration-test-report.md
          echo "## Package Information" >> integration-reports/integration-test-report.md
          if command -v packet-insight &> /dev/null; then
            packet-insight --version >> integration-reports/integration-test-report.md 2>&1 || echo "Version retrieval failed"
          fi
          echo "" >> integration-reports/integration-test-report.md
          echo "## Tests Executed" >> integration-reports/integration-test-report.md
          echo "- CLI availability: Attempted" >> integration-reports/integration-test-report.md
          echo "- Help command: Attempted" >> integration-reports/integration-test-report.md

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ github.run_id }}
          path: integration-reports/
          retention-days: 30
          compression-level: 6
          if-no-files-found: warn

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-distributions, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ github.run_id }}'
          path: ./release-artifacts/
          merge-multiple: true

      - name: Create release notes
        run: |
          echo "# Release Notes" > release-notes.md
          echo "" >> release-notes.md
          echo "## Version ${GITHUB_REF#refs/tags/}" >> release-notes.md
          echo "" >> release-notes.md
          echo "### What's New" >> release-notes.md
          echo "- Enhanced packet analysis capabilities" >> release-notes.md
          echo "- Improved cross-platform compatibility" >> release-notes.md
          echo "- Better error handling and user experience" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Downloads" >> release-notes.md
          echo "- Standalone executables attached to this release" >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/dist/packet-insight-*
            release-artifacts/documentation-*/
          body_path: release-notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Report deployment success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "Version: ${GITHUB_REF#refs/tags/}"
          echo "GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}"

      - name: Update deployment status
        run: |
          mkdir -p deployment-reports
          echo "Deployment completed at $(date)" > deployment-reports/deployment-status.txt

      - name: Upload deployment status
        uses: actions/upload-artifact@v4
        with:
          name: deployment-status-${{ github.run_id }}
          path: deployment-reports/
          retention-days: 365
          compression-level: 1

  cleanup:
    name: Cleanup & Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, security-analysis, test, build-docs, build-distributions, integration-tests]
    if: always()
    
    steps:
      - name: Download all artifacts for cleanup
        uses: actions/download-artifact@v4
        if: always()
        with:
          pattern: '*-${{ github.run_id }}'
          path: ./all-artifacts/
          merge-multiple: true

      - name: Generate final report
        if: always()
        run: |
          mkdir -p final-reports
          echo "# CI/CD Pipeline Final Report" > final-reports/final-report.md
          echo "" >> final-reports/final-report.md
          echo "## Workflow Summary" >> final-reports/final-report.md
          echo "- Workflow Run ID: ${{ github.run_id }}" >> final-reports/final-report.md
          echo "- Trigger: ${{ github.event_name }}" >> final-reports/final-report.md
          echo "- Branch/Tag: ${GITHUB_REF#refs/*/}" >> final-reports/final-report.md
          echo "- Commit: ${{ github.sha }}" >> final-reports/final-report.md
          echo "- Completion Time: $(date)" >> final-reports/final-report.md
          echo "" >> final-reports/final-report.md
          echo "## Job Status" >> final-reports/final-report.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> final-reports/final-report.md
          echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> final-reports/final-report.md
          echo "- Tests: ${{ needs.test.result }}" >> final-reports/final-report.md
          echo "- Documentation: ${{ needs.build-docs.result }}" >> final-reports/final-report.md
          echo "- Distributions: ${{ needs.build-distributions.result }}" >> final-reports/final-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> final-reports/final-report.md
          echo "" >> final-reports/final-report.md
          echo "## Artifacts Generated" >> final-reports/final-report.md
          if [ -d ./all-artifacts ]; then
            find ./all-artifacts -type f | sort >> final-reports/final-report.md
          fi

      - name: Upload final report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-report-${{ github.run_id }}
          path: final-reports/
          retention-days: 90
          compression-level: 6

      - name: Cleanup old artifacts (if needed)
        if: always()
        run: |
          echo "Cleanup completed - artifacts will expire based on retention-days settings"
          echo "Old artifacts are automatically cleaned up by GitHub Actions"
